{"version":3,"sources":["pages/site/store/reducer.js","store/reducers.js","pages/site/store/constants.js","store/index.js","utils/path.js","pages/site/index.js","pages/site/store/actionCreators.js","router/App.js","serviceWorker.js","index.js"],"names":["defaultState","fromJS","btnText","reducers","combineReducers","site","state","arguments","length","undefined","action","type","set","data","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","enhancer","applyMiddleware","apply","path","src","Index","render","react_default","a","createElement","className","notice_bar_default","marqueeProps","loop","style","padding","alt","card_default","Body","button_default","onClick","_this","btnClick","bind","Object","assertThisInitialized","inline","size","width","Footer","content","extra","toast_default","success","Component","connect","getIn","dispatch","changeBtnText","name","store","createStore","rootReducer","App","es","BrowserRouter","basename","Switch","Route","exact","component","SiteIndex","Boolean","location","hostname","match","ReactDOM","router_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e44c4c83.chunk.js","sourcesContent":["/*\n*首页数据reducer\n*/\nimport * as actionTypes from './constants'\nimport { fromJS } from 'immutable'\n// 将state变为immutable对象\nconst defaultState  = fromJS({\n  btnText: \"点我\", // 首页btn按钮文字\n})\nexport default (state=defaultState, action)=> {\n  switch (action.type) {\n    case actionTypes.GET_BTN_TEXT:\n      return state.set('btnText', action.data)\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux-immutable'\nimport { reducer as siteReducer } from '@/pages/site/store'\n\nconst reducers = combineReducers({\n  site: siteReducer\n})\nexport default reducers\n","// 设置按钮名称\nexport const GET_BTN_TEXT = 'site/GET_BTN_TEXT'\n","import {createStore, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose\nconst middlewares = [\n  thunk\n]\nif (process.env.NODE_ENV === 'development') { // 开发环境下\n  middlewares.push(require('redux-logger').createLogger()) // redux-logger通常在中间件的最后\n}\nconst enhancer = composeEnhancers(\n  applyMiddleware(...middlewares),\n  // other store enhancers if any\n)\nexport default function configStore () {\n  const store = createStore(rootReducer, enhancer)\n  return store\n}\n","const NODE_ENV = process.env.NODE_ENV\nexport default (src) => {\n  let prod_fix = ''\n  let img_fix = '/images/'\n  return NODE_ENV === 'production' ? prod_fix + img_fix + src : img_fix + src\n}\n","import React,{ Component} from 'react'\nimport { connect } from 'react-redux'\n\nimport { NoticeBar,Card,Button,Toast } from 'antd-mobile';\nimport path from '@/utils/path'\nimport * as actionCreators from './store/actionCreators'\nclass Index extends Component{\n  btnClick(){\n    Toast.success('原谅成功，但不要给他戴原谅帽哦，嘿嘿;-)', 6);\n  }\n  render = ()=>{\n    return(\n      <div className='outer'>\n        <NoticeBar marqueeProps={{ loop: true, style: { padding: '0 7.5px' } }}>\n        原谅这个小可怜吧～原谅这个小可怜吧～原谅这个小可怜吧～原谅这个小可怜吧～原谅这个小可怜吧～他就是个笨怂\n        </NoticeBar>\n        <img src={path('top.png')} alt=''className='top_nanner' />\n        <div className='card_box'>\n          <Card className='card'>\n            <Card.Body>\n              <div>\n               &nbsp;&nbsp;&nbsp;&nbsp;写时已是华灯初上，人散声寂，我想我此时此刻应该最清醒。昨夜种种我都清楚的记得，老婆的伤心的啼哭，气然于胸口坚定的说让我走的语气\n               ，此刻的我仿佛置身与那时。我不该丢下你一人在寒风中搜寻，莫怕是受人厉色？如若受了风寒？那我万般不能原谅自己。<span>♥</span>\n               <br/>\n               <div className='blank'></div>\n               &nbsp;&nbsp;&nbsp;&nbsp;有时候我一直想，我拥有全世界最好的女孩，善良懂事聪明伶俐，娟美细琢勇敢无畏。自己是全天下最幸运最幸福的男人了。我们虽然过的紧凑，但谈不上清苦；\n               &nbsp;&nbsp;&nbsp;&nbsp;我们白天躬身工作，可晚上仍旧心照相依，每个晚上，我都会因为看到你而自足，而安稳。和你在一起的每一天，每一刻都值的细细回味。<span>♥</span><br/>\n               <div className='blank'></div>\n               &nbsp;&nbsp;&nbsp;&nbsp;昨天让你受了太多的委屈，其实我心里明白，我变的有很多地方开始退缩，我惧怕冷言，惧怕内心的孤单，伤心亲人的离去，内心其实万般杂陈。很多地方未顾及甚至未想到\n               对你有一丝丝的关怀，原谅我吧，我心里挚爱的人。我暗自发誓，我会比以前更加爱你疼你。我甚至幻想着我们搬新家后的美丽日子。我还会为你变着花样做饭，做你最爱吃的，\n               做你最想吃的。我们依旧是彼此最温暖的港湾。<span>♥</span><br/>\n               <div className='blank'></div>\n               &nbsp;&nbsp;&nbsp;&nbsp;如果有人问我我会怎样表达对爱人的思念和爱意，我会黯然愁苦因思念，怅然若失因离别。也会情歌笙箫对伊人，甜言蜜语话床沿。<span>♥</span>\n               <br/>\n               <div className='blank'></div>\n               &nbsp;&nbsp;&nbsp;&nbsp;原谅我，我的爱人，我心依旧<span>♥</span>。\n              </div>\n            </Card.Body>\n             <Button onClick={this.btnClick.bind(this)} type=\"ghost\" className='btn' inline size=\"small\" style={{ width:'120px'}}>点击原谅</Button>\n            <Card.Footer content=\"\" extra={<div className='text_num'>字数：快700字;-)</div>} />\n          </Card>\n        </div>\n      </div>\n    )\n  }\n}\n// 获取数据\nconst mapStateToProps = (state) => ({\n  btnText:state.getIn(['site', 'btnText'])\n})\n// 定义事件action\nconst mapDispatchToProps = (dispatch) => ({\n  changeBtnText(name){\n    dispatch(actionCreators.setBtnText(name))\n  },\n})\nexport default connect(mapStateToProps,mapDispatchToProps)(Index)\n","import * as actionTypes from './constants'\n// import axios from 'axios'\n\nexport const setBtnText = (data)=>({\n  type: actionTypes.GET_BTN_TEXT,\n  data\n})\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport configStore from '@/store'\n\nimport SiteIndex from '@/pages/site/index'\n\nconst store = configStore()\n\nconst App = ()=> (\n  <Provider store = {store}>\n    <Router basename=\"/\">\n      <Switch>\n        <Route exact path='/' component={SiteIndex} />\n      </Switch>\n    </Router>\n  </Provider>\n)\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/style.scss';\nimport App from './router/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}